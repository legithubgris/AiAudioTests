{"ast":null,"code":"// src/utils.js\nimport * as XLSX from 'xlsx';\n\n/**\n * Parse an Excel file and return its contents as a JavaScript object\n * @param {File} file - The Excel file to parse\n * @returns {Promise<Array>} - Promise resolving to array of rows\n */\nexport const parseXlsx = file => {\n  return new Promise((resolve, reject) => {\n    if (!file) {\n      reject(new Error('No file provided'));\n      return;\n    }\n\n    // Check file type\n    const isExcel = file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || file.type === 'application/vnd.ms-excel' || file.name.endsWith('.xlsx') || file.name.endsWith('.xls');\n    if (!isExcel) {\n      reject(new Error(`File \"${file.name}\" is not a valid Excel file`));\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, {\n          type: 'array'\n        });\n        if (!workbook.SheetNames || workbook.SheetNames.length === 0) {\n          reject(new Error('Excel file contains no sheets'));\n          return;\n        }\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        if (!worksheet) {\n          reject(new Error('Could not access worksheet in Excel file'));\n          return;\n        }\n\n        // Convert to JSON with header row\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1\n        });\n        if (!jsonData || jsonData.length < 2) {\n          reject(new Error('Excel file appears to be empty or has no data rows'));\n          return;\n        }\n        const headers = jsonData[0]; // First row as headers\n        const rows = jsonData.slice(1).map(row => {\n          const rowObject = {};\n          headers.forEach((header, index) => {\n            rowObject[header] = row[index];\n          });\n          return rowObject;\n        });\n        resolve(rows);\n      } catch (error) {\n        reject(new Error(`Error parsing Excel file: ${error.message}`));\n      }\n    };\n    reader.onerror = e => reject(new Error('Error reading file'));\n    reader.readAsArrayBuffer(file);\n  });\n};","map":{"version":3,"names":["XLSX","parseXlsx","file","Promise","resolve","reject","Error","isExcel","type","name","endsWith","reader","FileReader","onload","e","data","Uint8Array","target","result","workbook","read","SheetNames","length","firstSheetName","worksheet","Sheets","jsonData","utils","sheet_to_json","header","headers","rows","slice","map","row","rowObject","forEach","index","error","message","onerror","readAsArrayBuffer"],"sources":["/Users/gr4yf1r3/testSites/tts-website/web/src/utils.js"],"sourcesContent":["// src/utils.js\nimport * as XLSX from 'xlsx';\n\n/**\n * Parse an Excel file and return its contents as a JavaScript object\n * @param {File} file - The Excel file to parse\n * @returns {Promise<Array>} - Promise resolving to array of rows\n */\nexport const parseXlsx = (file) => {\n  return new Promise((resolve, reject) => {\n    if (!file) {\n      reject(new Error('No file provided'));\n      return;\n    }\n    \n    // Check file type\n    const isExcel = \n      file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || \n      file.type === 'application/vnd.ms-excel' ||\n      file.name.endsWith('.xlsx') || \n      file.name.endsWith('.xls');\n      \n    if (!isExcel) {\n      reject(new Error(`File \"${file.name}\" is not a valid Excel file`));\n      return;\n    }\n    \n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      try {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, { type: 'array' });\n        \n        if (!workbook.SheetNames || workbook.SheetNames.length === 0) {\n          reject(new Error('Excel file contains no sheets'));\n          return;\n        }\n        \n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        \n        if (!worksheet) {\n          reject(new Error('Could not access worksheet in Excel file'));\n          return;\n        }\n        \n        // Convert to JSON with header row\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n        \n        if (!jsonData || jsonData.length < 2) {\n          reject(new Error('Excel file appears to be empty or has no data rows'));\n          return;\n        }\n        \n        const headers = jsonData[0]; // First row as headers\n        const rows = jsonData.slice(1).map(row => {\n          const rowObject = {};\n          headers.forEach((header, index) => {\n            rowObject[header] = row[index];\n          });\n          return rowObject;\n        });\n        \n        resolve(rows);\n      } catch (error) {\n        reject(new Error(`Error parsing Excel file: ${error.message}`));\n      }\n    };\n    \n    reader.onerror = (e) => reject(new Error('Error reading file'));\n    reader.readAsArrayBuffer(file);\n  });\n};"],"mappings":"AAAA;AACA,OAAO,KAAKA,IAAI,MAAM,MAAM;;AAE5B;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAIC,IAAI,IAAK;EACjC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI,CAACH,IAAI,EAAE;MACTG,MAAM,CAAC,IAAIC,KAAK,CAAC,kBAAkB,CAAC,CAAC;MACrC;IACF;;IAEA;IACA,MAAMC,OAAO,GACXL,IAAI,CAACM,IAAI,KAAK,mEAAmE,IACjFN,IAAI,CAACM,IAAI,KAAK,0BAA0B,IACxCN,IAAI,CAACO,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,IAC3BR,IAAI,CAACO,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC;IAE5B,IAAI,CAACH,OAAO,EAAE;MACZF,MAAM,CAAC,IAAIC,KAAK,CAAC,SAASJ,IAAI,CAACO,IAAI,6BAA6B,CAAC,CAAC;MAClE;IACF;IAEA,MAAME,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;MACrB,IAAI;QACF,MAAMC,IAAI,GAAG,IAAIC,UAAU,CAACF,CAAC,CAACG,MAAM,CAACC,MAAM,CAAC;QAC5C,MAAMC,QAAQ,GAAGnB,IAAI,CAACoB,IAAI,CAACL,IAAI,EAAE;UAAEP,IAAI,EAAE;QAAQ,CAAC,CAAC;QAEnD,IAAI,CAACW,QAAQ,CAACE,UAAU,IAAIF,QAAQ,CAACE,UAAU,CAACC,MAAM,KAAK,CAAC,EAAE;UAC5DjB,MAAM,CAAC,IAAIC,KAAK,CAAC,+BAA+B,CAAC,CAAC;UAClD;QACF;QAEA,MAAMiB,cAAc,GAAGJ,QAAQ,CAACE,UAAU,CAAC,CAAC,CAAC;QAC7C,MAAMG,SAAS,GAAGL,QAAQ,CAACM,MAAM,CAACF,cAAc,CAAC;QAEjD,IAAI,CAACC,SAAS,EAAE;UACdnB,MAAM,CAAC,IAAIC,KAAK,CAAC,0CAA0C,CAAC,CAAC;UAC7D;QACF;;QAEA;QACA,MAAMoB,QAAQ,GAAG1B,IAAI,CAAC2B,KAAK,CAACC,aAAa,CAACJ,SAAS,EAAE;UAAEK,MAAM,EAAE;QAAE,CAAC,CAAC;QAEnE,IAAI,CAACH,QAAQ,IAAIA,QAAQ,CAACJ,MAAM,GAAG,CAAC,EAAE;UACpCjB,MAAM,CAAC,IAAIC,KAAK,CAAC,oDAAoD,CAAC,CAAC;UACvE;QACF;QAEA,MAAMwB,OAAO,GAAGJ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,MAAMK,IAAI,GAAGL,QAAQ,CAACM,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,GAAG,IAAI;UACxC,MAAMC,SAAS,GAAG,CAAC,CAAC;UACpBL,OAAO,CAACM,OAAO,CAAC,CAACP,MAAM,EAAEQ,KAAK,KAAK;YACjCF,SAAS,CAACN,MAAM,CAAC,GAAGK,GAAG,CAACG,KAAK,CAAC;UAChC,CAAC,CAAC;UACF,OAAOF,SAAS;QAClB,CAAC,CAAC;QAEF/B,OAAO,CAAC2B,IAAI,CAAC;MACf,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdjC,MAAM,CAAC,IAAIC,KAAK,CAAC,6BAA6BgC,KAAK,CAACC,OAAO,EAAE,CAAC,CAAC;MACjE;IACF,CAAC;IAED5B,MAAM,CAAC6B,OAAO,GAAI1B,CAAC,IAAKT,MAAM,CAAC,IAAIC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAC/DK,MAAM,CAAC8B,iBAAiB,CAACvC,IAAI,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}