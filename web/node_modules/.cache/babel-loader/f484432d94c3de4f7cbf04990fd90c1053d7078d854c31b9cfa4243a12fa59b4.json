{"ast":null,"code":"// src/utils.js\nimport * as XLSX from 'xlsx';\n\n/**\n * Parse an Excel file and return its contents as a JavaScript object\n * @param {File} file - The Excel file to parse\n * @returns {Promise<Array>} - Promise resolving to array of rows\n */\nexport const parseXlsx = file => {\n  return new Promise((resolve, reject) => {\n    if (!file) {\n      reject(new Error('No file provided'));\n      return;\n    }\n\n    // Check file type\n    const isExcel = file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || file.type === 'application/vnd.ms-excel' || file.name.endsWith('.xlsx') || file.name.endsWith('.xls');\n    if (!isExcel) {\n      reject(new Error(`File \"${file.name}\" is not a valid Excel file`));\n      return;\n    }\n\n    // Check file size (limit to 10MB)\n    const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\n    if (file.size > MAX_FILE_SIZE) {\n      reject(new Error(`File size exceeds the limit (${Math.ceil(MAX_FILE_SIZE / (1024 * 1024))}MB)`));\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, {\n          type: 'array'\n        });\n        if (!workbook.SheetNames || workbook.SheetNames.length === 0) {\n          reject(new Error('Excel file contains no sheets'));\n          return;\n        }\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        if (!worksheet) {\n          reject(new Error('Could not access worksheet in Excel file'));\n          return;\n        }\n\n        // Convert to JSON with header row\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1\n        });\n        if (!jsonData || jsonData.length === 0) {\n          reject(new Error('Excel file appears to be empty'));\n          return;\n        }\n\n        // Validate proper format - need at least one column for text prompts\n        if (jsonData.some(row => row.length === 0)) {\n          console.warn('Some rows in the Excel file may be empty');\n        }\n\n        // Validate data has actual text content\n        const containsText = jsonData.some(row => row.length > 0 && row[0] !== undefined && String(row[0]).trim().length > 0);\n        if (!containsText) {\n          reject(new Error('Excel file does not contain any valid text prompts in the first column'));\n          return;\n        }\n        resolve(jsonData);\n      } catch (error) {\n        reject(new Error(`Error parsing Excel file: ${error.message}`));\n      }\n    };\n    reader.onerror = e => reject(new Error('Error reading file'));\n    reader.readAsArrayBuffer(file);\n  });\n};","map":{"version":3,"names":["XLSX","parseXlsx","file","Promise","resolve","reject","Error","isExcel","type","name","endsWith","MAX_FILE_SIZE","size","Math","ceil","reader","FileReader","onload","e","data","Uint8Array","target","result","workbook","read","SheetNames","length","firstSheetName","worksheet","Sheets","jsonData","utils","sheet_to_json","header","some","row","console","warn","containsText","undefined","String","trim","error","message","onerror","readAsArrayBuffer"],"sources":["/Users/gr4yf1r3/testSites/tts-website/src/utils.js"],"sourcesContent":["// src/utils.js\nimport * as XLSX from 'xlsx';\n\n/**\n * Parse an Excel file and return its contents as a JavaScript object\n * @param {File} file - The Excel file to parse\n * @returns {Promise<Array>} - Promise resolving to array of rows\n */\nexport const parseXlsx = (file) => {\n  return new Promise((resolve, reject) => {\n    if (!file) {\n      reject(new Error('No file provided'));\n      return;\n    }\n    \n    // Check file type\n    const isExcel = \n      file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || \n      file.type === 'application/vnd.ms-excel' ||\n      file.name.endsWith('.xlsx') || \n      file.name.endsWith('.xls');\n      \n    if (!isExcel) {\n      reject(new Error(`File \"${file.name}\" is not a valid Excel file`));\n      return;\n    }\n    \n    // Check file size (limit to 10MB)\n    const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\n    if (file.size > MAX_FILE_SIZE) {\n      reject(new Error(`File size exceeds the limit (${Math.ceil(MAX_FILE_SIZE / (1024 * 1024))}MB)`));\n      return;\n    }\n    \n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      try {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, { type: 'array' });\n        \n        if (!workbook.SheetNames || workbook.SheetNames.length === 0) {\n          reject(new Error('Excel file contains no sheets'));\n          return;\n        }\n        \n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        \n        if (!worksheet) {\n          reject(new Error('Could not access worksheet in Excel file'));\n          return;\n        }\n        \n        // Convert to JSON with header row\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n        \n        if (!jsonData || jsonData.length === 0) {\n          reject(new Error('Excel file appears to be empty'));\n          return;\n        }\n        \n        // Validate proper format - need at least one column for text prompts\n        if (jsonData.some(row => row.length === 0)) {\n          console.warn('Some rows in the Excel file may be empty');\n        }\n        \n        // Validate data has actual text content\n        const containsText = jsonData.some(row => \n          row.length > 0 && \n          row[0] !== undefined && \n          String(row[0]).trim().length > 0\n        );\n        \n        if (!containsText) {\n          reject(new Error('Excel file does not contain any valid text prompts in the first column'));\n          return;\n        }\n        \n        resolve(jsonData);\n      } catch (error) {\n        reject(new Error(`Error parsing Excel file: ${error.message}`));\n      }\n    };\n    \n    reader.onerror = (e) => reject(new Error('Error reading file'));\n    reader.readAsArrayBuffer(file);\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}