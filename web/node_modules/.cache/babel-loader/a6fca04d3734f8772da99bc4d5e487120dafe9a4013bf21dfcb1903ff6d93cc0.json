{"ast":null,"code":"var _jsxFileName = \"/Users/gr4yf1r3/testSites/tts-website/web/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { parseXlsx } from './utils'; // Import parseXlsx from utils.js\nimport AudioList from './components/AudioList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport TtsForm from './components/TtsForm';\nimport ApiKeyInput from './components/ApiKeyInput';\nimport OpenAI from 'openai';\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\n/**\n * OpenAI API Key from environment variables\n * @type {string}\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n\n/**\n * Validates if a given API key has the correct format\n * @param {string} key - The API key to validate\n * @returns {boolean} - True if the key is valid, false otherwise\n */\nconst isValidApiKey = key => {\n  return key && typeof key === 'string' && key.startsWith('sk-') && key.length > 20;\n};\n\n// Initialize with stored API key if available\nconst storedApiKey = localStorage.getItem('openai_api_key') || apiKey;\n\n/**\n * Initialize OpenAI client - will be re-initialized when API key changes\n */\nlet openai = new OpenAI({\n  apiKey: storedApiKey,\n  dangerouslyAllowBrowser: true // Required for browser usage\n});\n\n/**\n * Main application component\n * Handles text-to-speech generation, excel file processing, and audio file management\n */\nconst App = () => {\n  _s();\n  const [audioFiles, setAudioFiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [apiKey, setApiKey] = useState(storedApiKey || '');\n  const [processingProgress, setProcessingProgress] = useState({\n    current: 0,\n    total: 0\n  });\n\n  // Listen for changes to file checkboxes\n  useEffect(() => {\n    const handleFileCheckChanged = event => {\n      const {\n        index,\n        checked\n      } = event.detail;\n      setAudioFiles(prev => {\n        const newFiles = [...prev];\n        newFiles[index] = {\n          ...newFiles[index],\n          checked\n        };\n        return newFiles;\n      });\n    };\n    window.addEventListener('fileCheckChanged', handleFileCheckChanged);\n    return () => {\n      window.removeEventListener('fileCheckChanged', handleFileCheckChanged);\n    };\n  }, []);\n\n  // Clear cache data from other sessions when the service restarts\n  useEffect(() => {\n    const clearCacheOnRestart = () => {\n      // Clear any stored audio file references\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('audio_') || key.startsWith('tts_cache_')) {\n          localStorage.removeItem(key);\n        }\n      });\n\n      // Clear any sessionStorage as well\n      const sessionKeys = Object.keys(sessionStorage);\n      sessionKeys.forEach(key => {\n        if (key.startsWith('audio_') || key.startsWith('tts_cache_')) {\n          sessionStorage.removeItem(key);\n        }\n      });\n      console.log('Cache data from previous sessions cleared');\n    };\n\n    // Clear cache on component mount (service restart)\n    clearCacheOnRestart();\n  }, []); // Empty dependency array means this runs once on mount\n\n  // Effect to handle API key changes\n  useEffect(() => {\n    if (apiKey) {\n      // Save to localStorage\n      localStorage.setItem('openai_api_key', apiKey);\n\n      // Re-initialize OpenAI client with new key\n      openai = new OpenAI({\n        apiKey: apiKey,\n        dangerouslyAllowBrowser: true\n      });\n    }\n  }, [apiKey]);\n\n  /**\n   * Handles audio generation from text prompt using OpenAI API\n   * @param {string} prompt - The text prompt to convert to audio\n   * @param {string} persona - The persona or style for the speech (optional)\n   * @param {string} voice - The voice model to use for speech synthesis\n   */\n  const handleGenerateAudio = async (prompt, persona, voice) => {\n    if (!prompt.trim()) {\n      setError(\"Please enter a prompt text\");\n      return;\n    }\n\n    // First check if API key is available and valid\n    if (!apiKey || !apiKey.startsWith('sk-') || apiKey.length < 20) {\n      setError(\"Please enter a valid OpenAI API key. It should start with 'sk-'\");\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Generating audio for prompt: \"${prompt}\" with voice: ${voice}`);\n      const response = await openai.audio.speech.create({\n        model: \"tts-1\",\n        voice: voice,\n        input: prompt,\n        instructions: persona || undefined\n      });\n      const audioBlob = await response.blob();\n      const fileName = `${prompt.substring(0, 20).replace(/[^a-zA-Z0-9]/g, '_')}.mp3`;\n      console.log(`Successfully generated audio: ${fileName}`);\n      setAudioFiles(prev => [...prev, {\n        name: fileName,\n        url: audioBlob,\n        prompt: prompt,\n        checked: false\n      }]);\n    } catch (err) {\n      console.error('Error generating speech:', err);\n\n      // More specific error messages based on the error\n      if (err.message && err.message.includes('API key')) {\n        setError(`API key error: ${err.message}. Check your .env file.`);\n      } else if (err.status === 429) {\n        setError(\"Rate limit exceeded. Please try again later.\");\n      } else {\n        setError(`Failed to generate audio: ${err.message || 'Unknown error'}`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Handles bulk upload and processing of audio files from selected Excel files\n   * Uses chunking for better performance with large files\n   * @param {FileList} files - The list of Excel files to upload and process\n   */\n  const handleUploadFiles = async files => {\n    setLoading(true);\n    setError(null);\n    setProcessingProgress({\n      current: 0,\n      total: 0\n    });\n\n    // First check if API key is available and valid\n    if (!isValidApiKey(apiKey)) {\n      setError(\"OpenAI API key is missing or invalid. Check your .env file.\");\n      setLoading(false);\n      return;\n    }\n\n    // Track successes and failures\n    let successCount = 0;\n    let failureCount = 0;\n    let totalRowsToProcess = 0;\n\n    // First, calculate total rows across all files for accurate progress tracking\n    for (const file of files) {\n      if (file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {\n        try {\n          const data = await parseXlsx(file);\n          if (data && data.length > 0) {\n            // Skip header row if it exists\n            const startRow = data[0] && typeof data[0][0] === 'string' && (data[0][0].toLowerCase().includes('prompt') || data[0][0].toLowerCase().includes('text')) ? 1 : 0;\n            totalRowsToProcess += data.length - startRow;\n          }\n        } catch (err) {\n          console.error('Error parsing XLSX file during count:', err);\n        }\n      }\n    }\n\n    // Set the total for progress tracking\n    setProcessingProgress({\n      current: 0,\n      total: totalRowsToProcess\n    });\n\n    // Process each file\n    for (const file of files) {\n      if (file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {\n        try {\n          console.log(`Processing Excel file: ${file.name}`);\n          const data = await parseXlsx(file);\n          if (!data || data.length === 0) {\n            setError(`File \"${file.name}\" appears to be empty.`);\n            continue;\n          }\n          console.log(`Parsed data from file ${file.name}:`, data);\n\n          // Skip header row if it exists\n          const startRow = 0; // Headers are already handled in parseXlsx\n\n          console.log(`Starting processing from row ${startRow + 1}`);\n\n          // Process data in chunks to prevent UI freezing with large files\n          const CHUNK_SIZE = 5; // Process 5 rows at a time\n\n          for (let i = startRow; i < data.length; i += CHUNK_SIZE) {\n            const chunk = data.slice(i, i + CHUNK_SIZE);\n            console.log(`Processing chunk:`, chunk);\n            for (const [rowIndex, rowData] of chunk.entries()) {\n              const rowNumber = i + rowIndex + 1;\n              await processRow(rowIndex, rowData, rowNumber, openai);\n            }\n          }\n        } catch (err) {\n          console.error(`Error processing file ${file.name}:`, err);\n          setError(`Failed to process file \"${file.name}\": ${err.message || 'Unknown error'}`);\n        }\n      } else {\n        setError(`File \"${file.name}\" is not a valid Excel file.`);\n      }\n    }\n\n    // Show a summary message\n    if (successCount > 0 && failureCount === 0) {\n      setError(null); // Clear any previous errors\n      console.log(`All ${successCount} audio files generated successfully!`);\n    } else if (successCount > 0 && failureCount > 0) {\n      setError(`Generated ${successCount} files successfully, but ${failureCount} failed. Check the list for details.`);\n    } else if (successCount === 0 && failureCount > 0) {\n      setError(`Failed to generate any audio files. Check the console for details.`);\n    }\n    setLoading(false);\n    setProcessingProgress({\n      current: 0,\n      total: 0\n    }); // Reset progress\n  };\n\n  /**\n   * Handles downloading of a single audio file\n   * @param {number} index - The index of the audio file in the list\n   */\n  const handleDownload = index => {\n    const file = audioFiles[index];\n    if (file && file.url) {\n      try {\n        const url = URL.createObjectURL(file.url);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = file.name;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n        console.log(`Downloaded file: ${file.name}`);\n      } catch (err) {\n        console.error('Error downloading file:', err);\n        setError(`Failed to download file: ${err.message}`);\n      }\n    } else if (file) {\n      setError(`Cannot download \"${file.name}\" - no audio data available`);\n    }\n  };\n\n  // Add \"Check All\" and \"Uncheck All\" buttons functionality with dynamic text\n  const areAllSelected = audioFiles.length > 0 && audioFiles.every(file => file.checked);\n  const toggleSelectAll = () => {\n    if (areAllSelected) {\n      // If all are selected, unselect all\n      setAudioFiles(prev => prev.map(file => ({\n        ...file,\n        checked: false\n      })));\n    } else {\n      // If some or none are selected, select all\n      setAudioFiles(prev => prev.map(file => ({\n        ...file,\n        checked: true\n      })));\n    }\n  };\n\n  /**\n   * Clears the entire playlist and releases all blob URLs to free memory\n   */\n  const clearPlaylist = () => {\n    // Release all blob URLs to prevent memory leaks\n    audioFiles.forEach(file => {\n      if (file.url && typeof file.url === 'object') {\n        URL.revokeObjectURL(URL.createObjectURL(file.url));\n      }\n    });\n\n    // Clear the audio files array\n    setAudioFiles([]);\n    setError(null);\n    console.log('Playlist cleared and memory released');\n  };\n\n  /**\n   * Clears only the selected files from the playlist\n   */\n  const clearSelectedFiles = () => {\n    const selectedIndexes = audioFiles.map((file, index) => file.checked ? index : -1).filter(index => index !== -1);\n    if (selectedIndexes.length === 0) {\n      alert('No files selected for removal.');\n      return;\n    }\n\n    // Release blob URLs for selected files to prevent memory leaks\n    selectedIndexes.forEach(index => {\n      const file = audioFiles[index];\n      if (file.url && typeof file.url === 'object') {\n        URL.revokeObjectURL(URL.createObjectURL(file.url));\n      }\n    });\n\n    // Remove selected files from the array\n    setAudioFiles(prev => prev.filter((file, index) => !file.checked));\n    setError(null);\n    console.log(`Removed ${selectedIndexes.length} selected files from playlist`);\n  };\n\n  /**\n   * Handles bulk downloading of selected audio files\n   */\n  const handleBulkDownload = async () => {\n    const selectedFiles = audioFiles.filter(file => file.checked);\n    if (selectedFiles.length === 0) {\n      alert('No files selected for download. Please select files or check all to download.');\n      return;\n    }\n    try {\n      const zip = new JSZip();\n      for (const file of selectedFiles) {\n        if (file.url) {\n          const response = await fetch(URL.createObjectURL(file.url));\n          const blob = await response.blob();\n          zip.file(file.name, blob);\n        } else {\n          console.warn(`File ${file.name} has no URL and will be skipped.`);\n        }\n      }\n      const zipBlob = await zip.generateAsync({\n        type: 'blob'\n      });\n      saveAs(zipBlob, 'audio_files.zip');\n      console.log('ZIP file created and download initiated.');\n    } catch (error) {\n      console.error('Error creating ZIP file:', error);\n      alert('An error occurred while creating the ZIP file. Please try again.');\n    }\n  };\n\n  // Define the processRow function if missing\n  const processRow = async (rowIndex, rowData, rowNumber, openaiClient) => {\n    // Support multiple column name variations for flexibility\n    const promptText = rowData[\"Prompt Text\"] || rowData[\"Prompt name\"] || rowData[\"Text\"] || rowData[\"A\"] || '';\n    const model = rowData[\"Model\"] || rowData[\"C\"] || 'tts-1'; // Default to tts-1\n    let voice = rowData[\"Voice\"] || rowData[\"D\"] || 'alloy'; // Use \"Voice\" column if available\n    const instructions = rowData[\"Instructions\"] || rowData[\"Prop text\"] || rowData[\"E\"] || rowData[\"B\"] || ''; // Use \"Instructions\" column if available\n\n    // Convert to string to handle any data type issues\n    const promptString = String(promptText).trim();\n    const instructionsString = String(instructions).trim();\n    if (!promptString) {\n      console.warn(`Row ${rowNumber}: No prompt text found, skipping`);\n      return {\n        success: false,\n        error: 'No prompt text'\n      };\n    }\n\n    // Validate the voice parameter\n    const allowedVoices = ['nova', 'shimmer', 'echo', 'onyx', 'fable', 'alloy', 'ash', 'sage', 'coral'];\n    if (!allowedVoices.includes(voice.toLowerCase())) {\n      console.warn(`Invalid voice '${voice}' for row ${rowNumber}. Falling back to default 'alloy'.`);\n      voice = 'alloy';\n    }\n\n    // Validate model (OpenAI currently supports tts-1 and tts-1-hd)\n    const allowedModels = ['tts-1', 'tts-1-hd'];\n    if (!allowedModels.includes(model)) {\n      console.warn(`Invalid model '${model}' for row ${rowNumber}. Falling back to default 'tts-1'.`);\n      model = 'tts-1';\n    }\n    try {\n      console.log(`Processing row ${rowNumber}: \"${promptString.substring(0, 30)}...\" with voice \"${voice}\", model \"${model}\", instructions: \"${instructionsString.substring(0, 30)}...\"`);\n      const requestData = {\n        model: model,\n        voice: voice.toLowerCase(),\n        input: promptString\n      };\n\n      // Only add instructions if they exist and are not empty\n      if (instructionsString && instructionsString.length > 0) {\n        requestData.instructions = instructionsString;\n      }\n      const response = await openaiClient.audio.speech.create(requestData);\n      const audioBlob = await response.blob();\n      const fileName = `Row${rowNumber}_${promptString.substring(0, 15).replace(/[^a-zA-Z0-9]/g, '_')}.mp3`;\n      setAudioFiles(prev => [...prev, {\n        name: fileName,\n        url: audioBlob,\n        prompt: promptString,\n        voice: voice,\n        model: model,\n        instructions: instructionsString,\n        checked: false\n      }]);\n\n      // Update progress\n      setProcessingProgress(prev => ({\n        ...prev,\n        current: prev.current + 1\n      }));\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error(`Error generating speech for row ${rowNumber}:`, err);\n      setAudioFiles(prev => [...prev, {\n        name: `Error_Row${rowNumber}.mp3`,\n        url: null,\n        prompt: `Error with \"${promptString ? promptString.substring(0, 30) : 'Empty prompt'}...\": ${err.message}`,\n        voice: voice,\n        model: model,\n        instructions: instructionsString,\n        checked: false,\n        error: true\n      }]);\n\n      // Update progress even for errors\n      setProcessingProgress(prev => ({\n        ...prev,\n        current: prev.current + 1\n      }));\n      return {\n        success: false,\n        error: err\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(ApiKeyInput, {\n        initialApiKey: apiKey,\n        onApiKeyChange: setApiKey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TtsForm, {\n        onGenerateAudio: handleGenerateAudio,\n        onUploadFiles: handleUploadFiles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 19\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: processingProgress.total > 0 ? `Generating audio: ${processingProgress.current} of ${processingProgress.total} items processed` : 'Generating audio...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }, this), loading && processingProgress.total > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${processingProgress.current / processingProgress.total * 100}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-text\",\n          children: [Math.round(processingProgress.current / processingProgress.total * 100), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 11\n      }, this), audioFiles.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(AudioList, {\n          audioFiles: audioFiles,\n          onDownload: handleDownload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bulk-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleSelectAll,\n            children: areAllSelected ? 'Unselect All' : 'Select All'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleBulkDownload,\n            children: \"Download Selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              const hasSelectedFiles = audioFiles.some(file => file.checked);\n              if (hasSelectedFiles) {\n                clearSelectedFiles();\n              } else {\n                clearPlaylist();\n              }\n            },\n            className: \"clear-playlist-btn\",\n            children: audioFiles.some(file => file.checked) ? 'Clear Selected Files' : 'Clear Playlist'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 475,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"PGLMqDHVJfUXj4KhfYzBLCBFFAs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","parseXlsx","AudioList","Header","Footer","TtsForm","ApiKeyInput","OpenAI","JSZip","saveAs","jsxDEV","_jsxDEV","Fragment","_Fragment","apiKey","process","env","REACT_APP_OPENAI_API_KEY","isValidApiKey","key","startsWith","length","storedApiKey","localStorage","getItem","openai","dangerouslyAllowBrowser","App","_s","audioFiles","setAudioFiles","loading","setLoading","error","setError","setApiKey","processingProgress","setProcessingProgress","current","total","handleFileCheckChanged","event","index","checked","detail","prev","newFiles","window","addEventListener","removeEventListener","clearCacheOnRestart","keys","Object","forEach","removeItem","sessionKeys","sessionStorage","console","log","setItem","handleGenerateAudio","prompt","persona","voice","trim","response","audio","speech","create","model","input","instructions","undefined","audioBlob","blob","fileName","substring","replace","name","url","err","message","includes","status","handleUploadFiles","files","successCount","failureCount","totalRowsToProcess","file","type","endsWith","data","startRow","toLowerCase","CHUNK_SIZE","i","chunk","slice","rowIndex","rowData","entries","rowNumber","processRow","handleDownload","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","areAllSelected","every","toggleSelectAll","map","clearPlaylist","clearSelectedFiles","selectedIndexes","filter","alert","handleBulkDownload","selectedFiles","zip","fetch","warn","zipBlob","generateAsync","openaiClient","promptText","promptString","String","instructionsString","success","allowedVoices","allowedModels","requestData","className","children","_jsxFileName","lineNumber","columnNumber","initialApiKey","onApiKeyChange","onGenerateAudio","onUploadFiles","style","width","Math","round","onDownload","onClick","hasSelectedFiles","some","_c","$RefreshReg$"],"sources":["/Users/gr4yf1r3/testSites/tts-website/web/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { parseXlsx } from './utils';  // Import parseXlsx from utils.js\nimport AudioList from './components/AudioList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport TtsForm from './components/TtsForm';\nimport ApiKeyInput from './components/ApiKeyInput';\nimport OpenAI from 'openai';\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\n/**\n * OpenAI API Key from environment variables\n * @type {string}\n */\nconst apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n\n/**\n * Validates if a given API key has the correct format\n * @param {string} key - The API key to validate\n * @returns {boolean} - True if the key is valid, false otherwise\n */\nconst isValidApiKey = (key) => {\n  return key && typeof key === 'string' && key.startsWith('sk-') && key.length > 20;\n};\n\n// Initialize with stored API key if available\nconst storedApiKey = localStorage.getItem('openai_api_key') || apiKey;\n\n/**\n * Initialize OpenAI client - will be re-initialized when API key changes\n */\nlet openai = new OpenAI({\n  apiKey: storedApiKey,\n  dangerouslyAllowBrowser: true // Required for browser usage\n});\n\n/**\n * Main application component\n * Handles text-to-speech generation, excel file processing, and audio file management\n */\nconst App = () => {\n  const [audioFiles, setAudioFiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [apiKey, setApiKey] = useState(storedApiKey || '');\n  const [processingProgress, setProcessingProgress] = useState({ current: 0, total: 0 });\n\n  // Listen for changes to file checkboxes\n  useEffect(() => {\n    const handleFileCheckChanged = (event) => {\n      const { index, checked } = event.detail;\n      setAudioFiles(prev => {\n        const newFiles = [...prev];\n        newFiles[index] = { ...newFiles[index], checked };\n        return newFiles;\n      });\n    };\n\n    window.addEventListener('fileCheckChanged', handleFileCheckChanged);\n    return () => {\n      window.removeEventListener('fileCheckChanged', handleFileCheckChanged);\n    };\n  }, []);\n  \n  // Clear cache data from other sessions when the service restarts\n  useEffect(() => {\n    const clearCacheOnRestart = () => {\n      // Clear any stored audio file references\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('audio_') || key.startsWith('tts_cache_')) {\n          localStorage.removeItem(key);\n        }\n      });\n      \n      // Clear any sessionStorage as well\n      const sessionKeys = Object.keys(sessionStorage);\n      sessionKeys.forEach(key => {\n        if (key.startsWith('audio_') || key.startsWith('tts_cache_')) {\n          sessionStorage.removeItem(key);\n        }\n      });\n      \n      console.log('Cache data from previous sessions cleared');\n    };\n\n    // Clear cache on component mount (service restart)\n    clearCacheOnRestart();\n  }, []); // Empty dependency array means this runs once on mount\n  \n  // Effect to handle API key changes\n  useEffect(() => {\n    if (apiKey) {\n      // Save to localStorage\n      localStorage.setItem('openai_api_key', apiKey);\n      \n      // Re-initialize OpenAI client with new key\n      openai = new OpenAI({\n        apiKey: apiKey,\n        dangerouslyAllowBrowser: true\n      });\n    }\n  }, [apiKey]);\n\n  /**\n   * Handles audio generation from text prompt using OpenAI API\n   * @param {string} prompt - The text prompt to convert to audio\n   * @param {string} persona - The persona or style for the speech (optional)\n   * @param {string} voice - The voice model to use for speech synthesis\n   */\n  const handleGenerateAudio = async (prompt, persona, voice) => {\n    if (!prompt.trim()) {\n      setError(\"Please enter a prompt text\");\n      return;\n    }\n\n    // First check if API key is available and valid\n    if (!apiKey || !apiKey.startsWith('sk-') || apiKey.length < 20) {\n      setError(\"Please enter a valid OpenAI API key. It should start with 'sk-'\");\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    \n    try {\n      console.log(`Generating audio for prompt: \"${prompt}\" with voice: ${voice}`);\n      \n      const response = await openai.audio.speech.create({\n        model: \"tts-1\",\n        voice: voice,\n        input: prompt,\n        instructions: persona || undefined,\n      });\n      \n      const audioBlob = await response.blob();\n      const fileName = `${prompt.substring(0, 20).replace(/[^a-zA-Z0-9]/g, '_')}.mp3`;\n      \n      console.log(`Successfully generated audio: ${fileName}`);\n      \n      setAudioFiles(prev => [\n        ...prev, \n        {\n          name: fileName,\n          url: audioBlob,\n          prompt: prompt,\n          checked: false\n        }\n      ]);\n    } catch (err) {\n      console.error('Error generating speech:', err);\n      \n      // More specific error messages based on the error\n      if (err.message && err.message.includes('API key')) {\n        setError(`API key error: ${err.message}. Check your .env file.`);\n      } else if (err.status === 429) {\n        setError(\"Rate limit exceeded. Please try again later.\");\n      } else {\n        setError(`Failed to generate audio: ${err.message || 'Unknown error'}`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Handles bulk upload and processing of audio files from selected Excel files\n   * Uses chunking for better performance with large files\n   * @param {FileList} files - The list of Excel files to upload and process\n   */\n  const handleUploadFiles = async (files) => {\n    setLoading(true);\n    setError(null);\n    setProcessingProgress({ current: 0, total: 0 });\n    \n    // First check if API key is available and valid\n    if (!isValidApiKey(apiKey)) {\n      setError(\"OpenAI API key is missing or invalid. Check your .env file.\");\n      setLoading(false);\n      return;\n    }\n    \n    // Track successes and failures\n    let successCount = 0;\n    let failureCount = 0;\n    let totalRowsToProcess = 0;\n    \n    // First, calculate total rows across all files for accurate progress tracking\n    for (const file of files) {\n      if (file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || \n          file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {\n        try {\n          const data = await parseXlsx(file);\n          if (data && data.length > 0) {\n            // Skip header row if it exists\n            const startRow = data[0] && typeof data[0][0] === 'string' && \n                         (data[0][0].toLowerCase().includes('prompt') || \n                          data[0][0].toLowerCase().includes('text')) ? 1 : 0;\n            totalRowsToProcess += (data.length - startRow);\n          }\n        } catch (err) {\n          console.error('Error parsing XLSX file during count:', err);\n        }\n      }\n    }\n    \n    // Set the total for progress tracking\n    setProcessingProgress({ current: 0, total: totalRowsToProcess });\n    \n    // Process each file\n    for (const file of files) {\n      if (file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || \n          file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {\n        try {\n          console.log(`Processing Excel file: ${file.name}`);\n          const data = await parseXlsx(file);\n\n          if (!data || data.length === 0) {\n            setError(`File \"${file.name}\" appears to be empty.`);\n            continue;\n          }\n\n          console.log(`Parsed data from file ${file.name}:`, data);\n\n          // Skip header row if it exists\n          const startRow = 0; // Headers are already handled in parseXlsx\n\n          console.log(`Starting processing from row ${startRow + 1}`);\n\n          // Process data in chunks to prevent UI freezing with large files\n          const CHUNK_SIZE = 5; // Process 5 rows at a time\n\n          for (let i = startRow; i < data.length; i += CHUNK_SIZE) {\n            const chunk = data.slice(i, i + CHUNK_SIZE);\n            console.log(`Processing chunk:`, chunk);\n\n            for (const [rowIndex, rowData] of chunk.entries()) {\n              const rowNumber = i + rowIndex + 1;\n              await processRow(rowIndex, rowData, rowNumber, openai);\n            }\n          }\n        } catch (err) {\n          console.error(`Error processing file ${file.name}:`, err);\n          setError(`Failed to process file \"${file.name}\": ${err.message || 'Unknown error'}`);\n        }\n      } else {\n        setError(`File \"${file.name}\" is not a valid Excel file.`);\n      }\n    }\n    \n    // Show a summary message\n    if (successCount > 0 && failureCount === 0) {\n      setError(null); // Clear any previous errors\n      console.log(`All ${successCount} audio files generated successfully!`);\n    } else if (successCount > 0 && failureCount > 0) {\n      setError(`Generated ${successCount} files successfully, but ${failureCount} failed. Check the list for details.`);\n    } else if (successCount === 0 && failureCount > 0) {\n      setError(`Failed to generate any audio files. Check the console for details.`);\n    }\n    \n    setLoading(false);\n    setProcessingProgress({ current: 0, total: 0 }); // Reset progress\n  };\n\n  /**\n   * Handles downloading of a single audio file\n   * @param {number} index - The index of the audio file in the list\n   */\n  const handleDownload = (index) => {\n    const file = audioFiles[index];\n    if (file && file.url) {\n      try {\n        const url = URL.createObjectURL(file.url);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = file.name;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n        console.log(`Downloaded file: ${file.name}`);\n      } catch (err) {\n        console.error('Error downloading file:', err);\n        setError(`Failed to download file: ${err.message}`);\n      }\n    } else if (file) {\n      setError(`Cannot download \"${file.name}\" - no audio data available`);\n    }\n  };\n\n  // Add \"Check All\" and \"Uncheck All\" buttons functionality with dynamic text\n  const areAllSelected = audioFiles.length > 0 && audioFiles.every(file => file.checked);\n  \n  const toggleSelectAll = () => {\n    if (areAllSelected) {\n      // If all are selected, unselect all\n      setAudioFiles(prev => prev.map(file => ({ ...file, checked: false })));\n    } else {\n      // If some or none are selected, select all\n      setAudioFiles(prev => prev.map(file => ({ ...file, checked: true })));\n    }\n  };\n\n  /**\n   * Clears the entire playlist and releases all blob URLs to free memory\n   */\n  const clearPlaylist = () => {\n    // Release all blob URLs to prevent memory leaks\n    audioFiles.forEach(file => {\n      if (file.url && typeof file.url === 'object') {\n        URL.revokeObjectURL(URL.createObjectURL(file.url));\n      }\n    });\n    \n    // Clear the audio files array\n    setAudioFiles([]);\n    setError(null);\n    console.log('Playlist cleared and memory released');\n  };\n\n  /**\n   * Clears only the selected files from the playlist\n   */\n  const clearSelectedFiles = () => {\n    const selectedIndexes = audioFiles\n      .map((file, index) => file.checked ? index : -1)\n      .filter(index => index !== -1);\n    \n    if (selectedIndexes.length === 0) {\n      alert('No files selected for removal.');\n      return;\n    }\n    \n    // Release blob URLs for selected files to prevent memory leaks\n    selectedIndexes.forEach(index => {\n      const file = audioFiles[index];\n      if (file.url && typeof file.url === 'object') {\n        URL.revokeObjectURL(URL.createObjectURL(file.url));\n      }\n    });\n    \n    // Remove selected files from the array\n    setAudioFiles(prev => prev.filter((file, index) => !file.checked));\n    setError(null);\n    console.log(`Removed ${selectedIndexes.length} selected files from playlist`);\n  };\n\n  /**\n   * Handles bulk downloading of selected audio files\n   */\n  const handleBulkDownload = async () => {\n    const selectedFiles = audioFiles.filter(file => file.checked);\n\n    if (selectedFiles.length === 0) {\n      alert('No files selected for download. Please select files or check all to download.');\n      return;\n    }\n\n    try {\n      const zip = new JSZip();\n\n      for (const file of selectedFiles) {\n        if (file.url) {\n          const response = await fetch(URL.createObjectURL(file.url));\n          const blob = await response.blob();\n          zip.file(file.name, blob);\n        } else {\n          console.warn(`File ${file.name} has no URL and will be skipped.`);\n        }\n      }\n\n      const zipBlob = await zip.generateAsync({ type: 'blob' });\n      saveAs(zipBlob, 'audio_files.zip');\n      console.log('ZIP file created and download initiated.');\n    } catch (error) {\n      console.error('Error creating ZIP file:', error);\n      alert('An error occurred while creating the ZIP file. Please try again.');\n    }\n  };\n\n  // Define the processRow function if missing\n  const processRow = async (rowIndex, rowData, rowNumber, openaiClient) => {\n    // Support multiple column name variations for flexibility\n    const promptText = rowData[\"Prompt Text\"] || rowData[\"Prompt name\"] || rowData[\"Text\"] || rowData[\"A\"] || '';\n    const model = rowData[\"Model\"] || rowData[\"C\"] || 'tts-1'; // Default to tts-1\n    let voice = rowData[\"Voice\"] || rowData[\"D\"] || 'alloy'; // Use \"Voice\" column if available\n    const instructions = rowData[\"Instructions\"] || rowData[\"Prop text\"] || rowData[\"E\"] || rowData[\"B\"] || ''; // Use \"Instructions\" column if available\n\n    // Convert to string to handle any data type issues\n    const promptString = String(promptText).trim();\n    const instructionsString = String(instructions).trim();\n    \n    if (!promptString) {\n      console.warn(`Row ${rowNumber}: No prompt text found, skipping`);\n      return { success: false, error: 'No prompt text' };\n    }\n\n    // Validate the voice parameter\n    const allowedVoices = ['nova', 'shimmer', 'echo', 'onyx', 'fable', 'alloy', 'ash', 'sage', 'coral'];\n    if (!allowedVoices.includes(voice.toLowerCase())) {\n      console.warn(`Invalid voice '${voice}' for row ${rowNumber}. Falling back to default 'alloy'.`);\n      voice = 'alloy';\n    }\n\n    // Validate model (OpenAI currently supports tts-1 and tts-1-hd)\n    const allowedModels = ['tts-1', 'tts-1-hd'];\n    if (!allowedModels.includes(model)) {\n      console.warn(`Invalid model '${model}' for row ${rowNumber}. Falling back to default 'tts-1'.`);\n      model = 'tts-1';\n    }\n\n    try {\n      console.log(`Processing row ${rowNumber}: \"${promptString.substring(0, 30)}...\" with voice \"${voice}\", model \"${model}\", instructions: \"${instructionsString.substring(0, 30)}...\"`);\n\n      const requestData = {\n        model: model,\n        voice: voice.toLowerCase(),\n        input: promptString,\n      };\n\n      // Only add instructions if they exist and are not empty\n      if (instructionsString && instructionsString.length > 0) {\n        requestData.instructions = instructionsString;\n      }\n\n      const response = await openaiClient.audio.speech.create(requestData);\n\n      const audioBlob = await response.blob();\n      const fileName = `Row${rowNumber}_${promptString.substring(0, 15).replace(/[^a-zA-Z0-9]/g, '_')}.mp3`;\n\n      setAudioFiles(prev => [\n        ...prev, \n        {\n          name: fileName,\n          url: audioBlob,\n          prompt: promptString,\n          voice: voice,\n          model: model,\n          instructions: instructionsString,\n          checked: false\n        }\n      ]);\n\n      // Update progress\n      setProcessingProgress(prev => ({ ...prev, current: prev.current + 1 }));\n\n      return { success: true };\n    } catch (err) {\n      console.error(`Error generating speech for row ${rowNumber}:`, err);\n\n      setAudioFiles(prev => [\n        ...prev, \n        {\n          name: `Error_Row${rowNumber}.mp3`,\n          url: null,\n          prompt: `Error with \"${promptString ? promptString.substring(0, 30) : 'Empty prompt'}...\": ${err.message}`,\n          voice: voice,\n          model: model,\n          instructions: instructionsString,\n          checked: false,\n          error: true\n        }\n      ]);\n\n      // Update progress even for errors\n      setProcessingProgress(prev => ({ ...prev, current: prev.current + 1 }));\n\n      return { success: false, error: err };\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n        <ApiKeyInput \n          initialApiKey={apiKey} \n          onApiKeyChange={setApiKey} \n        />\n        \n        <TtsForm \n          onGenerateAudio={handleGenerateAudio} \n          onUploadFiles={handleUploadFiles} \n        />\n        \n        {error && <div className=\"error-message\">{error}</div>}\n        \n        {loading && (\n          <div className=\"loading-spinner\">\n            {processingProgress.total > 0 \n              ? `Generating audio: ${processingProgress.current} of ${processingProgress.total} items processed` \n              : 'Generating audio...'}\n          </div>\n        )}\n        \n        {loading && processingProgress.total > 0 && (\n          <div className=\"progress-bar\">\n            <div \n              className=\"progress-fill\" \n              style={{ width: `${(processingProgress.current / processingProgress.total) * 100}%` }}\n            />\n            <div className=\"progress-text\">\n              {Math.round((processingProgress.current / processingProgress.total) * 100)}%\n            </div>\n          </div>\n        )}\n        \n        {audioFiles.length > 0 && (\n          <>\n            <AudioList audioFiles={audioFiles} onDownload={handleDownload} />\n            <div className=\"bulk-actions\">\n              <button onClick={toggleSelectAll}>\n                {areAllSelected ? 'Unselect All' : 'Select All'}\n              </button>\n              <button onClick={handleBulkDownload}>\n                Download Selected\n              </button>\n              <button \n                onClick={() => {\n                  const hasSelectedFiles = audioFiles.some(file => file.checked);\n                  if (hasSelectedFiles) {\n                    clearSelectedFiles();\n                  } else {\n                    clearPlaylist();\n                  }\n                }}\n                className=\"clear-playlist-btn\"\n              >\n                {audioFiles.some(file => file.checked) ? 'Clear Selected Files' : 'Clear Playlist'}\n              </button>\n            </div>\n          </>\n        )}\n      </main>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}