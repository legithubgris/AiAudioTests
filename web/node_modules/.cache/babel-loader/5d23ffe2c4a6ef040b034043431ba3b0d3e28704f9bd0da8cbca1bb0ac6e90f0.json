{"ast":null,"code":"var _jsxFileName = \"/Users/gr4yf1r3/testSites/tts-website/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { parseXlsx } from './utils'; // Import parseXlsx from utils.js\nimport AudioList from './components/AudioList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport TtsForm from './components/TtsForm';\nimport OpenAI from 'openai';\n\n// Initialize OpenAI with API key from environment variables\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Required for browser usage\n});\nconst App = () => {\n  _s();\n  const [audioFiles, setAudioFiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Listen for changes to file checkboxes\n  useEffect(() => {\n    const handleFileCheckChanged = event => {\n      const {\n        index,\n        checked\n      } = event.detail;\n      setAudioFiles(prev => {\n        const newFiles = [...prev];\n        newFiles[index] = {\n          ...newFiles[index],\n          checked\n        };\n        return newFiles;\n      });\n    };\n    window.addEventListener('fileCheckChanged', handleFileCheckChanged);\n    return () => {\n      window.removeEventListener('fileCheckChanged', handleFileCheckChanged);\n    };\n  }, []);\n  const handleGenerateAudio = async (prompt, persona, voice) => {\n    if (!prompt.trim()) {\n      setError(\"Please enter a prompt text\");\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await openai.audio.speech.create({\n        model: \"tts-1\",\n        voice: voice,\n        input: prompt,\n        instructions: persona || undefined\n      });\n      const audioBlob = await response.blob();\n      const fileName = `${prompt.substring(0, 20).replace(/[^a-zA-Z0-9]/g, '_')}.mp3`;\n      setAudioFiles(prev => [...prev, {\n        name: fileName,\n        url: audioBlob,\n        prompt: prompt,\n        checked: false\n      }]);\n    } catch (err) {\n      console.error('Error generating speech:', err);\n      setError(`Failed to generate audio: ${err.message || 'Unknown error'}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleUploadFiles = async files => {\n    setLoading(true);\n    setError(null);\n    for (const file of files) {\n      if (file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {\n        try {\n          const data = await parseXlsx(file);\n\n          // Skip header row if it exists\n          const startRow = data[0] && typeof data[0][0] === 'string' && (data[0][0].toLowerCase().includes('prompt') || data[0][0].toLowerCase().includes('text')) ? 1 : 0;\n\n          // Process each row (assuming column 0 contains the prompt text)\n          for (let i = startRow; i < data.length; i++) {\n            if (data[i] && data[i][0]) {\n              const promptText = data[i][0];\n              const voice = data[i][1] || 'alloy'; // Use column 1 for voice if available\n              const instructions = data[i][2] || ''; // Use column 2 for instructions if available\n\n              try {\n                const response = await openai.audio.speech.create({\n                  model: \"tts-1\",\n                  voice: voice,\n                  input: promptText,\n                  instructions: instructions || undefined\n                });\n                const audioBlob = await response.blob();\n                const fileName = `Row${i + 1}_${promptText.substring(0, 15).replace(/[^a-zA-Z0-9]/g, '_')}.mp3`;\n                setAudioFiles(prev => [...prev, {\n                  name: fileName,\n                  url: audioBlob,\n                  prompt: promptText,\n                  checked: false\n                }]);\n              } catch (err) {\n                console.error(`Error generating speech for row ${i + 1}:`, err);\n                // Continue with other rows even if one fails\n              }\n            }\n          }\n        } catch (err) {\n          console.error('Error parsing XLSX file:', err);\n          setError(`Failed to parse Excel file: ${err.message || 'Unknown error'}`);\n        }\n      } else {\n        setError(`File \"${file.name}\" is not a valid Excel file.`);\n      }\n    }\n    setLoading(false);\n  };\n  const handleDownload = index => {\n    const file = audioFiles[index];\n    if (file && file.url) {\n      const url = URL.createObjectURL(file.url);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = file.name;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    }\n  };\n  const handleBulkDownload = () => {\n    const selectedFiles = audioFiles.filter(file => file.checked);\n    if (selectedFiles.length === 0) {\n      // If none selected, download all\n      audioFiles.forEach((file, index) => handleDownload(index));\n    } else {\n      // Download only selected\n      selectedFiles.forEach(file => {\n        const index = audioFiles.indexOf(file);\n        if (index !== -1) handleDownload(index);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(TtsForm, {\n        onGenerateAudio: handleGenerateAudio,\n        onUploadFiles: handleUploadFiles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 19\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: \"Generating audio...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this), audioFiles.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(AudioList, {\n          audioFiles: audioFiles,\n          onDownload: handleDownload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bulk-actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleBulkDownload,\n            children: \"Download Selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"c0ixyzUrA/5GBGRBYx2JoZSrYWg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","parseXlsx","AudioList","Header","Footer","TtsForm","OpenAI","jsxDEV","_jsxDEV","Fragment","_Fragment","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","App","_s","audioFiles","setAudioFiles","loading","setLoading","error","setError","handleFileCheckChanged","event","index","checked","detail","prev","newFiles","window","addEventListener","removeEventListener","handleGenerateAudio","prompt","persona","voice","trim","response","audio","speech","create","model","input","instructions","undefined","audioBlob","blob","fileName","substring","replace","name","url","err","console","message","handleUploadFiles","files","file","type","endsWith","data","startRow","toLowerCase","includes","i","length","promptText","handleDownload","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","handleBulkDownload","selectedFiles","filter","forEach","indexOf","className","children","_jsxFileName","lineNumber","columnNumber","onGenerateAudio","onUploadFiles","onDownload","onClick","_c","$RefreshReg$"],"sources":["/Users/gr4yf1r3/testSites/tts-website/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { parseXlsx } from './utils';  // Import parseXlsx from utils.js\nimport AudioList from './components/AudioList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport TtsForm from './components/TtsForm';\nimport OpenAI from 'openai';\n\n// Initialize OpenAI with API key from environment variables\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Required for browser usage\n});\n\nconst App = () => {\n  const [audioFiles, setAudioFiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Listen for changes to file checkboxes\n  useEffect(() => {\n    const handleFileCheckChanged = (event) => {\n      const { index, checked } = event.detail;\n      setAudioFiles(prev => {\n        const newFiles = [...prev];\n        newFiles[index] = { ...newFiles[index], checked };\n        return newFiles;\n      });\n    };\n\n    window.addEventListener('fileCheckChanged', handleFileCheckChanged);\n    return () => {\n      window.removeEventListener('fileCheckChanged', handleFileCheckChanged);\n    };\n  }, []);\n\n  const handleGenerateAudio = async (prompt, persona, voice) => {\n    if (!prompt.trim()) {\n      setError(\"Please enter a prompt text\");\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await openai.audio.speech.create({\n        model: \"tts-1\",\n        voice: voice,\n        input: prompt,\n        instructions: persona || undefined,\n      });\n      \n      const audioBlob = await response.blob();\n      const fileName = `${prompt.substring(0, 20).replace(/[^a-zA-Z0-9]/g, '_')}.mp3`;\n      \n      setAudioFiles(prev => [\n        ...prev, \n        {\n          name: fileName,\n          url: audioBlob,\n          prompt: prompt,\n          checked: false\n        }\n      ]);\n    } catch (err) {\n      console.error('Error generating speech:', err);\n      setError(`Failed to generate audio: ${err.message || 'Unknown error'}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUploadFiles = async (files) => {\n    setLoading(true);\n    setError(null);\n    \n    for (const file of files) {\n      if (file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || \n          file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {\n        try {\n          const data = await parseXlsx(file);\n          \n          // Skip header row if it exists\n          const startRow = data[0] && typeof data[0][0] === 'string' && \n                         (data[0][0].toLowerCase().includes('prompt') || \n                          data[0][0].toLowerCase().includes('text')) ? 1 : 0;\n                          \n          // Process each row (assuming column 0 contains the prompt text)\n          for (let i = startRow; i < data.length; i++) {\n            if (data[i] && data[i][0]) {\n              const promptText = data[i][0];\n              const voice = data[i][1] || 'alloy'; // Use column 1 for voice if available\n              const instructions = data[i][2] || ''; // Use column 2 for instructions if available\n              \n              try {\n                const response = await openai.audio.speech.create({\n                  model: \"tts-1\",\n                  voice: voice,\n                  input: promptText,\n                  instructions: instructions || undefined,\n                });\n                \n                const audioBlob = await response.blob();\n                const fileName = `Row${i+1}_${promptText.substring(0, 15).replace(/[^a-zA-Z0-9]/g, '_')}.mp3`;\n                \n                setAudioFiles(prev => [\n                  ...prev, \n                  {\n                    name: fileName,\n                    url: audioBlob,\n                    prompt: promptText,\n                    checked: false\n                  }\n                ]);\n              } catch (err) {\n                console.error(`Error generating speech for row ${i+1}:`, err);\n                // Continue with other rows even if one fails\n              }\n            }\n          }\n        } catch (err) {\n          console.error('Error parsing XLSX file:', err);\n          setError(`Failed to parse Excel file: ${err.message || 'Unknown error'}`);\n        }\n      } else {\n        setError(`File \"${file.name}\" is not a valid Excel file.`);\n      }\n    }\n    \n    setLoading(false);\n  };\n\n  const handleDownload = (index) => {\n    const file = audioFiles[index];\n    if (file && file.url) {\n      const url = URL.createObjectURL(file.url);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = file.name;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    }\n  };\n\n  const handleBulkDownload = () => {\n    const selectedFiles = audioFiles.filter(file => file.checked);\n    if (selectedFiles.length === 0) {\n      // If none selected, download all\n      audioFiles.forEach((file, index) => handleDownload(index));\n    } else {\n      // Download only selected\n      selectedFiles.forEach(file => {\n        const index = audioFiles.indexOf(file);\n        if (index !== -1) handleDownload(index);\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n        <TtsForm \n          onGenerateAudio={handleGenerateAudio} \n          onUploadFiles={handleUploadFiles} \n        />\n        \n        {error && <div className=\"error-message\">{error}</div>}\n        {loading && <div className=\"loading-spinner\">Generating audio...</div>}\n        \n        {audioFiles.length > 0 && (\n          <>\n            <AudioList audioFiles={audioFiles} onDownload={handleDownload} />\n            <div className=\"bulk-actions\">\n              <button onClick={handleBulkDownload}>\n                Download Selected\n              </button>\n            </div>\n          </>\n        )}\n      </main>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}